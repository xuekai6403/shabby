I"J<p><img src="http://starry99.github.io/catbook/img/falali2.jpg" alt="Image" /></p>
<h4 id="一普通使用">一.普通使用</h4>
<p>1.后台执行</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dispatch_async(dispatch_get_global_queue(0, 0), ^{
     // something
});
</code></pre></div></div>
<p>2.主线程执行</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dispatch_async(dispatch_get_main_queue(), ^{
     // something
});
</code></pre></div></div>
<p>3.一次性执行</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    // code to be executed once
});
</code></pre></div></div>
<p>4.延迟两秒执行</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>double delayInSeconds = 2.0;
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
    // code to be executed on the main queue after delay
});
</code></pre></div></div>
<h4 id="自定义使用">自定义使用</h4>
<p>1.自定义队列</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dispatch_queue_t urls_queue = dispatch_queue_create("blog.devtang.com", NULL);
dispatch_async(urls_queue, ^{
     // your code
});
dispatch_release(urls_queue);
</code></pre></div></div>
<p>2.两个队列并行执行，执行完之后回调一个Block</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dispatch_group_t group = dispatch_group_create();
dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{
     // 并行执行的线程一
});
dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{
     // 并行执行的线程二
});
dispatch_group_notify(group, dispatch_get_global_queue(0,0), ^{
     // 汇总结果
});
</code></pre></div></div>
:ET