I"*<p>公司的项目Api文档现在都是用word写，主要存在三个问题。</p>
<ul>
  <li>1.每次改动一点东西都需要重新改文档再发一遍很麻烦</li>
  <li>2.格式不规范，目录不规范，接口多了很难去对应查找。</li>
  <li>3.后期项目的迭代，功能更改，项目人员轮换基本就很难去找了。YApi有效解决了以上问题，还给接口提供了测试功能。非常感谢去哪儿开发团队的开源，让我们都能用到这么优秀的项目。
接下来直奔主题，讲一下Mac系统搭建YApi有可能遇到的一些问题：</li>
</ul>

<h3 id="1环境要求">1.环境要求</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nodejs（7.6+)
mongodb（2.6+）
（备注：检查一下这两个是否安装，版本是否符合要求）
</code></pre></div></div>

<p>安装、启动Mango</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ brew install mongodb
$ brew services start mongodb
==&gt; Tapping homebrew/services
Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...
remote: Counting objects: 14, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 14 (delta 0), reused 8 (delta 0), pack-reused 0
{
Unpacking objects: 100% (14/14), done.
Tapped 0 formulae (43 files, 55.4KB)
==&gt; Successfully started `mongodb` (label: homebrew.mxcl.mongodb)
</code></pre></div></div>

<h3 id="2安装yapi">2.安装YAPI</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd 你想把工程放在哪里

$ mkdir yapi &amp;&amp; cd yapi

$ git clone https://github.com/YMFE/yapi.git vendors --depth=1
</code></pre></div></div>

<h3 id="3修改配置">3.修改配置</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cp vendors/config_example.json ./config.json
$ vim ./config.json

{
  "port": "3000",
  "adminAccount": "admin@admin.com",
  "db": {
    "servername": "127.0.0.1",
    "DATABASE":  "yapi",
    "port": 27017,
    "user": "test1",
    "pass": "test1"
  },
  "mail": {
    "enable": true,
    "host": "smtp.163.com",
    "port": 465,
    "from": "***@163.com",
    "auth": {
        "user": "***@163.com",
        "pass": "*****"
    }
  }
}
(这里需要了解和设置一下自己的stmp)
</code></pre></div></div>

<h3 id="4安装依赖">4.安装依赖</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd vendors
$ npm install --production --registry https://resgistry.npm.taobao.org
</code></pre></div></div>

<h3 id="5初始化">5.初始化</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm run install-server
</code></pre></div></div>

<h3 id="6启动服务">6.启动服务</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ node server/app.js &gt;&gt; yapi.log 2&gt;&amp;1 &amp;
</code></pre></div></div>

<h3 id="7打开chrome浏览器验证">7.打开Chrome浏览器验证</h3>
<p>（这里YApi要求浏览器最好用Chrome功能的完整性）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>URL：127.0.0.1:3000/login
用户名：admin@admin.com
密码：ymfe.org
</code></pre></div></div>

<h3 id="注意问题">注意问题</h3>
<p>以上有两个地方可能会报错：<br /></p>

<p>1.第4步的第二行代码报错如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm WARN yapi@1.3.9 license should be a valid SPDX license expression
</code></pre></div></div>

<p>解决办法：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm config rm proxy
$ npm config rm https-proxy
</code></pre></div></div>

<p>2.忘了是第5步还是第6步会报Mongodb的错误，报错如下:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: MongoError: Authentication failed., mongodb Authentication failed
error: MongoError: Authentication failed.mongodb connect error
</code></pre></div></div>

<p>原因:因MongoDB开启Auth认证 检查MongoDB是否已经创建相关库和配置的用户添加相关权限</p>

<p>解决办法：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mongo
MongoDB shell version v3.6.2
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.2
Welcome to the MongoDB shell.

#切换admin库
&gt; use admin
switched to db admin

#创建管理员用户myadmin并赋权
&gt; db.createUser({user:"myadmin",pwd:"secret",roles:[{role:"root",db:"admin"}]})

Successfully added user: {
	"user" : "myadmin",
	"roles" : [
		{
			"role" : "root",
			"db" : "admin"
		}
	]
}

#检查用户
&gt; show users
{
	"_id" : "admin.myadmin",
	"user" : "myadmin",
	"db" : "admin",
	"roles" : [
		{
			"role" : "root",
			"db" : "admin"
		}
	]
}

#创建yapi库
&gt; use yapi
switched to db yapi

#创建用户test1并赋权
&gt; db.createUser({user:"test1",pwd:"test1",roles:[{role:"readWrite",db:"yapi"}]})

Successfully added user: {
	"user" : "test1",
	"roles" : [
		{
			"role" : "readWrite",
			"db" : "yapi"
		}
	]
}

#检查用户
&gt; show users
{
	"_id" : "yapi.test1",
	"user" : "test1",
	"db" : "yapi",
	"roles" : [
		{
			"role" : "readWrite",
			"db" : "yapi"
		}
	]
}
</code></pre></div></div>

:ET